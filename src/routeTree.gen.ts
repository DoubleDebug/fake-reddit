/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignUpImport } from './routes/sign-up'
import { Route as NewSubredditImport } from './routes/new-subreddit'
import { Route as NewPostImport } from './routes/new-post'
import { Route as LoginImport } from './routes/login'
import { Route as InboxImport } from './routes/inbox'
import { Route as IndexImport } from './routes/index'
import { Route as UserUsernameImport } from './routes/user.$username'
import { Route as RIdImport } from './routes/r.$id'
import { Route as ProfileUsernameImport } from './routes/profile.$username'
import { Route as PostIdImport } from './routes/post.$id'
import { Route as LoginResetPasswordImport } from './routes/login.reset-password'
import { Route as InboxRoomIdImport } from './routes/inbox.$roomId'
import { Route as RIdNewPostImport } from './routes/r.$id.new-post'
import { Route as ProfileUsernameEditImport } from './routes/profile.$username.edit'

// Create/Update Routes

const SignUpRoute = SignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const NewSubredditRoute = NewSubredditImport.update({
  id: '/new-subreddit',
  path: '/new-subreddit',
  getParentRoute: () => rootRoute,
} as any)

const NewPostRoute = NewPostImport.update({
  id: '/new-post',
  path: '/new-post',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const InboxRoute = InboxImport.update({
  id: '/inbox',
  path: '/inbox',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserUsernameRoute = UserUsernameImport.update({
  id: '/user/$username',
  path: '/user/$username',
  getParentRoute: () => rootRoute,
} as any)

const RIdRoute = RIdImport.update({
  id: '/r/$id',
  path: '/r/$id',
  getParentRoute: () => rootRoute,
} as any)

const ProfileUsernameRoute = ProfileUsernameImport.update({
  id: '/profile/$username',
  path: '/profile/$username',
  getParentRoute: () => rootRoute,
} as any)

const PostIdRoute = PostIdImport.update({
  id: '/post/$id',
  path: '/post/$id',
  getParentRoute: () => rootRoute,
} as any)

const LoginResetPasswordRoute = LoginResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => LoginRoute,
} as any)

const InboxRoomIdRoute = InboxRoomIdImport.update({
  id: '/$roomId',
  path: '/$roomId',
  getParentRoute: () => InboxRoute,
} as any)

const RIdNewPostRoute = RIdNewPostImport.update({
  id: '/new-post',
  path: '/new-post',
  getParentRoute: () => RIdRoute,
} as any)

const ProfileUsernameEditRoute = ProfileUsernameEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => ProfileUsernameRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/inbox': {
      id: '/inbox'
      path: '/inbox'
      fullPath: '/inbox'
      preLoaderRoute: typeof InboxImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/new-post': {
      id: '/new-post'
      path: '/new-post'
      fullPath: '/new-post'
      preLoaderRoute: typeof NewPostImport
      parentRoute: typeof rootRoute
    }
    '/new-subreddit': {
      id: '/new-subreddit'
      path: '/new-subreddit'
      fullPath: '/new-subreddit'
      preLoaderRoute: typeof NewSubredditImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/inbox/$roomId': {
      id: '/inbox/$roomId'
      path: '/$roomId'
      fullPath: '/inbox/$roomId'
      preLoaderRoute: typeof InboxRoomIdImport
      parentRoute: typeof InboxImport
    }
    '/login/reset-password': {
      id: '/login/reset-password'
      path: '/reset-password'
      fullPath: '/login/reset-password'
      preLoaderRoute: typeof LoginResetPasswordImport
      parentRoute: typeof LoginImport
    }
    '/post/$id': {
      id: '/post/$id'
      path: '/post/$id'
      fullPath: '/post/$id'
      preLoaderRoute: typeof PostIdImport
      parentRoute: typeof rootRoute
    }
    '/profile/$username': {
      id: '/profile/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof ProfileUsernameImport
      parentRoute: typeof rootRoute
    }
    '/r/$id': {
      id: '/r/$id'
      path: '/r/$id'
      fullPath: '/r/$id'
      preLoaderRoute: typeof RIdImport
      parentRoute: typeof rootRoute
    }
    '/user/$username': {
      id: '/user/$username'
      path: '/user/$username'
      fullPath: '/user/$username'
      preLoaderRoute: typeof UserUsernameImport
      parentRoute: typeof rootRoute
    }
    '/profile/$username/edit': {
      id: '/profile/$username/edit'
      path: '/edit'
      fullPath: '/profile/$username/edit'
      preLoaderRoute: typeof ProfileUsernameEditImport
      parentRoute: typeof ProfileUsernameImport
    }
    '/r/$id/new-post': {
      id: '/r/$id/new-post'
      path: '/new-post'
      fullPath: '/r/$id/new-post'
      preLoaderRoute: typeof RIdNewPostImport
      parentRoute: typeof RIdImport
    }
  }
}

// Create and export the route tree

interface InboxRouteChildren {
  InboxRoomIdRoute: typeof InboxRoomIdRoute
}

const InboxRouteChildren: InboxRouteChildren = {
  InboxRoomIdRoute: InboxRoomIdRoute,
}

const InboxRouteWithChildren = InboxRoute._addFileChildren(InboxRouteChildren)

interface LoginRouteChildren {
  LoginResetPasswordRoute: typeof LoginResetPasswordRoute
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginResetPasswordRoute: LoginResetPasswordRoute,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

interface ProfileUsernameRouteChildren {
  ProfileUsernameEditRoute: typeof ProfileUsernameEditRoute
}

const ProfileUsernameRouteChildren: ProfileUsernameRouteChildren = {
  ProfileUsernameEditRoute: ProfileUsernameEditRoute,
}

const ProfileUsernameRouteWithChildren = ProfileUsernameRoute._addFileChildren(
  ProfileUsernameRouteChildren,
)

interface RIdRouteChildren {
  RIdNewPostRoute: typeof RIdNewPostRoute
}

const RIdRouteChildren: RIdRouteChildren = {
  RIdNewPostRoute: RIdNewPostRoute,
}

const RIdRouteWithChildren = RIdRoute._addFileChildren(RIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/inbox': typeof InboxRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/new-post': typeof NewPostRoute
  '/new-subreddit': typeof NewSubredditRoute
  '/sign-up': typeof SignUpRoute
  '/inbox/$roomId': typeof InboxRoomIdRoute
  '/login/reset-password': typeof LoginResetPasswordRoute
  '/post/$id': typeof PostIdRoute
  '/profile/$username': typeof ProfileUsernameRouteWithChildren
  '/r/$id': typeof RIdRouteWithChildren
  '/user/$username': typeof UserUsernameRoute
  '/profile/$username/edit': typeof ProfileUsernameEditRoute
  '/r/$id/new-post': typeof RIdNewPostRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/inbox': typeof InboxRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/new-post': typeof NewPostRoute
  '/new-subreddit': typeof NewSubredditRoute
  '/sign-up': typeof SignUpRoute
  '/inbox/$roomId': typeof InboxRoomIdRoute
  '/login/reset-password': typeof LoginResetPasswordRoute
  '/post/$id': typeof PostIdRoute
  '/profile/$username': typeof ProfileUsernameRouteWithChildren
  '/r/$id': typeof RIdRouteWithChildren
  '/user/$username': typeof UserUsernameRoute
  '/profile/$username/edit': typeof ProfileUsernameEditRoute
  '/r/$id/new-post': typeof RIdNewPostRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/inbox': typeof InboxRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/new-post': typeof NewPostRoute
  '/new-subreddit': typeof NewSubredditRoute
  '/sign-up': typeof SignUpRoute
  '/inbox/$roomId': typeof InboxRoomIdRoute
  '/login/reset-password': typeof LoginResetPasswordRoute
  '/post/$id': typeof PostIdRoute
  '/profile/$username': typeof ProfileUsernameRouteWithChildren
  '/r/$id': typeof RIdRouteWithChildren
  '/user/$username': typeof UserUsernameRoute
  '/profile/$username/edit': typeof ProfileUsernameEditRoute
  '/r/$id/new-post': typeof RIdNewPostRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/inbox'
    | '/login'
    | '/new-post'
    | '/new-subreddit'
    | '/sign-up'
    | '/inbox/$roomId'
    | '/login/reset-password'
    | '/post/$id'
    | '/profile/$username'
    | '/r/$id'
    | '/user/$username'
    | '/profile/$username/edit'
    | '/r/$id/new-post'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/inbox'
    | '/login'
    | '/new-post'
    | '/new-subreddit'
    | '/sign-up'
    | '/inbox/$roomId'
    | '/login/reset-password'
    | '/post/$id'
    | '/profile/$username'
    | '/r/$id'
    | '/user/$username'
    | '/profile/$username/edit'
    | '/r/$id/new-post'
  id:
    | '__root__'
    | '/'
    | '/inbox'
    | '/login'
    | '/new-post'
    | '/new-subreddit'
    | '/sign-up'
    | '/inbox/$roomId'
    | '/login/reset-password'
    | '/post/$id'
    | '/profile/$username'
    | '/r/$id'
    | '/user/$username'
    | '/profile/$username/edit'
    | '/r/$id/new-post'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InboxRoute: typeof InboxRouteWithChildren
  LoginRoute: typeof LoginRouteWithChildren
  NewPostRoute: typeof NewPostRoute
  NewSubredditRoute: typeof NewSubredditRoute
  SignUpRoute: typeof SignUpRoute
  PostIdRoute: typeof PostIdRoute
  ProfileUsernameRoute: typeof ProfileUsernameRouteWithChildren
  RIdRoute: typeof RIdRouteWithChildren
  UserUsernameRoute: typeof UserUsernameRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InboxRoute: InboxRouteWithChildren,
  LoginRoute: LoginRouteWithChildren,
  NewPostRoute: NewPostRoute,
  NewSubredditRoute: NewSubredditRoute,
  SignUpRoute: SignUpRoute,
  PostIdRoute: PostIdRoute,
  ProfileUsernameRoute: ProfileUsernameRouteWithChildren,
  RIdRoute: RIdRouteWithChildren,
  UserUsernameRoute: UserUsernameRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/inbox",
        "/login",
        "/new-post",
        "/new-subreddit",
        "/sign-up",
        "/post/$id",
        "/profile/$username",
        "/r/$id",
        "/user/$username"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/inbox": {
      "filePath": "inbox.tsx",
      "children": [
        "/inbox/$roomId"
      ]
    },
    "/login": {
      "filePath": "login.tsx",
      "children": [
        "/login/reset-password"
      ]
    },
    "/new-post": {
      "filePath": "new-post.tsx"
    },
    "/new-subreddit": {
      "filePath": "new-subreddit.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/inbox/$roomId": {
      "filePath": "inbox.$roomId.tsx",
      "parent": "/inbox"
    },
    "/login/reset-password": {
      "filePath": "login.reset-password.tsx",
      "parent": "/login"
    },
    "/post/$id": {
      "filePath": "post.$id.tsx"
    },
    "/profile/$username": {
      "filePath": "profile.$username.tsx",
      "children": [
        "/profile/$username/edit"
      ]
    },
    "/r/$id": {
      "filePath": "r.$id.tsx",
      "children": [
        "/r/$id/new-post"
      ]
    },
    "/user/$username": {
      "filePath": "user.$username.tsx"
    },
    "/profile/$username/edit": {
      "filePath": "profile.$username.edit.tsx",
      "parent": "/profile/$username"
    },
    "/r/$id/new-post": {
      "filePath": "r.$id.new-post.tsx",
      "parent": "/r/$id"
    }
  }
}
ROUTE_MANIFEST_END */
